%block-float {
	display:block; 
	float:left;
}

/// functions and mixin for linear-gradient taken from
/// https://www.sitepoint.com/building-linear-gradient-mixin-sass/

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
/// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
	@if is-direction($value) == false {
	  @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
	}
  
	$conversion-map: (
	  to top          : bottom,
	  to top right    : bottom left,
	  to right top    : left bottom,
	  to right        : left,
	  to bottom right : top left,
	  to right bottom : left top,
	  to bottom       : top,
	  to bottom left  : top right,
	  to left bottom  : right top,
	  to left         : right,
	  to left top     : right bottom,
	  to top left     : bottom right
	);
  
	@if map-has-key($conversion-map, $value) {
	  @return map-get($conversion-map, $value);
	}
  
	@return 90deg - $value;
}

/// Test if `$value` is a valid direction
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
	$is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
	$is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
  
	@return $is-keyword or $is-angle;
}

@mixin linear-gradient($property, $direction, $color-stops...) {
	// Direction has been omitted and happens to be a color-stop
	@if is-direction($direction) == false {
	  $color-stops: $direction, $color-stops;
	  $direction: 180deg;
	}
  
	#{$property}: nth(nth($color-stops, 1), 1);
	#{$property}: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
	#{$property}: linear-gradient($direction, $color-stops);
}

@mixin property-regular-hover($property, $color-reg, $color-hover) {
    #{$property}: $color-reg;
    &:hover {
		#{$property}: $color-hover;
	}
}

@mixin color-regular-hover($font-color-reg, $font-color-hover, $background-color-reg, $background-color-hover) {
    color: $font-color-reg;
	background-color: $background-color-reg;

	&:hover {
		color: $font-color-hover;
		background-color: $background-color-hover;
	}
}

@mixin calc($property, $default, $expression) { 
    #{$property}: $default;
    #{$property}: -webkit-calc(#{$expression}); 
    #{$property}: -moz-calc(#{$expression}); 
    #{$property}: calc(#{$expression}); 
}